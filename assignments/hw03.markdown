---
layout: homework
title: "Assignment #3"
---
# Assignment #3 - Due Tuesday, Feb 17th at 11PM

* [Readings](#readings)
* [Draw a Card](#part2)
* [Flipping a Coin](#part3)
* [Bin Hex Dec](#part4)
* [Loan Amortization Schedule](#part5)

<a name="readings"></a>

## Part 1 - Readings

Read __Chapter #4__ and __Chapter #5__ in your book, _{{site.book}}_ (covers Math class, chars, Strings, formatting, while loops, and for loops). Also see __Appendix F__ on Number Systems.

You can save nested loops for the following assignment. 

<a name="part3"></a>

## (15 points) Part 3 - Flipping a Coin

<pre><code data-trim contenteditable>         ..-"""""-..
       .'    ___    '.
      /    ."\  `\    \
     ;    /, (    |    ;
    ;    /_   '._ /     ;
    |     |-  '._`)     |
    ;     '-;-'  \      ;
     ; """" /    \\    ;
      \    '.__..-'   /
   jgs '._ 1 9 9 9 _.'
          ""-----""

</code></pre>

### Flipping a Coin

#### Overview

Write a game that allows you to continually bet on a coin flip until you either quit or lose all of your money.

#### Setup

* Create a class (<code>.java</code>) file called <code>CoinFlip.java</code>
* (This can be within a project that contains the other parts of this homework or it can be in separate project on its own)

#### Features

* Start the user with $100
* As long as the user doesn't quit, and as long as they have money...
	* Continually ask them <code>Type "heads", "tails", or "quit"</code>, __ignoring case__
	* If they do not enter any of the above, print out <code>"Huh?"</code> and ask again
	* If they choose quit, end the game and print out <code>"See ya later!"</code>
	* If they choose either heads or tails
		* Ask the player how much they want to bet
		* Flip the coin (feel free to include a bias, if you like, but add a comment about it)
		* If they guessed the coin flip correctly, add their bet to their total money
		* Otherwise, substract their bet from their total money
		* If they have 0 or less money, end the game and print out <code>You're outta money!</code>
	
#### Example Output

__(Lose $25, win $50, quit.)__

<pre><code data-trim contenteditable>Type "heads", "tails", or "quit"
> heads
How much are you going to bet?
> 25
The result is tails
You lost $25!
You now have $75
Type "heads", "tails", or "quit"
> tails
How much are you going to bet?
> 50
The result is tails
You made $50!
You now have $125
Type "heads", "tails", or "quit"
> quit
See ya later!
</code></pre>

__(Type in command that is not heads, tails or quit.)__

<pre><code data-trim contenteditable>Type "heads", "tails", or "quit"
> bleargh!
Huh?
Type "heads", "tails", or "quit"
> 
</code></pre>

__(Lose all money.)__

<pre><code data-trim contenteditable>Type "heads", "tails", or "quit"
> heads
How much are you going to bet?
> 120
The result is tails
You lost $120!
You now have $-20
You're outta money!
</code></pre>

<a name="part4"></a>

## (15 points) Part 4 - Hex Bin Dec

<pre><code data-trim contenteditable> _____ _____ __ __    _____ _____ _____    ____  _____ _____ 
 |  |  |   __|  |  |  | __  |     |   | |  |    \|   __|     |
 |     |   __|-   -|  | __ -|-   -| | | |  |  |  |   __|   --|
 |__|__|_____|__|__|  |_____|_____|_|___|  |____/|_____|_____|
</code></pre>

<!--_ -->


### Convert Binary or Hexadecimal Numbers to Decimal

#### Overview

Converting binary and hexadecimal numbers to decimal by hand is pain! Write a program that'll do this for you. It should accept either number, base-2 or base-16... and based on the prefix, 0b and 0x, it should convert to decimal appropriately.


#### Setup

* Create a class (<code>.java</code>) file called <code>BinHexDec.java</code>
* (This can be within a project that contains the other parts of this homework or it can be in separate project on its own)


#### Features

* ask the user to enter a number in either binary or hex
* the number must be prefixed with <code>0x</code> or <code>0b</code> for hex and binary respectively
* __read the input as a string__ 
* if the input does not have a valid prefix (<code>X$AAF0</code>)... or if it has a valid prefix, but no digits are present after the prefix (only <code>0x</code> or <code>0b</code>, without anything after), end the program and say <code>I don't know how to covert that number</code>
* if the input contains invalid digits for the specified base (for example <code>F</code>, or 15, for <code>0b</code>, or base-2), end the program with the message <code>Error parsing base-[either 2 or 16] number</code>
* if the input is valid, then convert the number to decimal
	* you can use <code>Integer.parseInt</code> with a single parameter (that is for the default, decimal)
	* however __you are not allowed to call the two parameter version of parseInt that allows you to use radix__ 
* for reference, converting from either a character to an int... or a String to an int 
	* <code>Character.getNumericValue(ch) // char to int</code>
	* <code>ch - 48 // or ch - '0', assuming your character is a digit</code>
	* <code>Integer.parseInt(s) // string to int, don't use radix for this assignment!</code>


#### Example Output

__(Converts from hexadecimal to decimal if prefix is 0x)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0xFFF1
Converting from base-16 to base-10
65521
</code></pre>

__(Converts from binary to decimal if prefix is 0b)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0b0101
Converting from base-2 to base-10
5
</code></pre>

__(Number does not start with 0x or 0b)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>bleargh
I don't know how to covert that number
</code></pre>

__(Number starts with appropriate prefix, but there are no characters after prefix)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0x
I don't know how to covert that number
</code></pre>

__(Number contains invalid digit for chosen base after prefix - there is no Z digit in base-16)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0xZZZZ
Error parsing base-16 number
</code></pre>

__(Number contains invalid digit for chosen base after prefix - there is no A digit in base-2)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0b101A
Error parsing base-2 number
</code></pre>

<a name="part5"></a>

## (15 points) Part 5 - Loan Amortization Schedule

<pre><code data-trim contenteditable>                            (   )
                          (    )
                           (    )
                          (    )
                            )  )
                           (  (                  /\
                            (_)                 /  \  /\
                    ________[_]________      /\/    \/  \
           /\      /\        ______    \    /   /\/\  /\/\
          /  \    //_\       \    /\    \  /\/\/    \/    \
   /\    / /\/\  //___\       \__/  \    \/
  /  \  /\/    \//_____\       \ |[]|     \
 /\/\/\/       //_______\       \|__|      \
/      \      /XXXXXXXXXX\                  \
        \    /_I_II  I__I_\__________________\
               I_I|  I__I_____[]_|_[]_____I
               I_II  I__I_____[]_|_[]_____I
               I II__I  I     XXXXXXX     I
            ~~~~~"   "~~~~~~~~~~~~~~~~~~~~~~~~
</code></pre>

### Problem 5.22 in 10th Edition of {{site.book}}: Loan Amortization Schedule

#### Overview

__Directly from the book, problem 5.22__...
(Financial application: loan amortization schedule) The monthly payment for a given loan pays the principal and the interest. The monthly interest is computed by multiplying the monthly interest rate and the balance (the remaining principal). The principal paid for the month is therefore the monthly payment minus the monthly interest. Write a program that lets the user enter the loan amount, number of years, and interest rate and displays the amortization schedule for the loan.

__Note__: The balance after the last payment may not be zero. If so, the last payment should be the normal monthly payment plus the final balance.

__Hint__: Write a loop to display the table. Since the monthly payment is the same for each month, it should be computed before the loop. The balance is initially the loan amount. For each iteration in the loop, compute the interest and principal, and update the balance. The loop may look like this:

<pre><code data-trim contenteditable>for(i = 1; i <= numberOfYears * 12; i++) {
	interest = monthlyInterestRate * balance;
	principal = monthlyPayment - interest;
	balance = balance - principal;
	System.out.println(i + "\t\t" + intrest + "\t\t" + principal + "\t\t" + balance)
}
</code></pre>

__Note from Professor__: Tailor the above code to suit your needs. This problem relies on information and examples from previous chapters in the book, so in order to solve it, you'll need to either:

1. Use Section 2.16 and __listing__ 2.9 (about software development process and computing loans) in the text as context
2. Do your own research on computing the monthly and total payment

#### Setup

* Create a class (<code>.java</code>) file called <code>Loan.java</code>
* (This can be within a project that contains the other parts of this homework or it can be in separate project on its own)


#### Example Output

__($10,000 loan, 1 year... with an interest rate of 7%)__

<pre><code data-trim contenteditable>Loan Amount: 10000
Number of Years: 1
Annual Interest Rate: 7

Monthly Payment: 865.26
Total Payment: 10383.21

Payment#     Interest     Principal    Balance
1            58.33        806.93       9193.07
2            53.62        811.64       8381.43
...
11           10.00        855.26       860.27
12            5.01        860.25         0.01
</code></pre>


# Submission Process

* Submit assignment via NYU Classes
* Submit each <code>.java</code> file as a separate attachment
	* only submit .java files (do not submit .class files or any other files that are created in Eclipse)
	* you can find your .java files in the directory that you specified as your workspace... and within the project folder contained in the workspace directory


# Grading Criteria

* no credit: file does not compile
* -2 points: files and classes are not named according to instructions
* -2 points: inconsistent style using curly braces, inconsistent use of spaces and indentation, lack of comments
* see individual projects for points per feature

