---
layout: homework
title: "Assignment #3"
---
# Assignment #3 - Due Tuesday, Feb 16th at 11PM

* [Readings](#readings)
* [Wish List](#part2)
* [Bin Hex Dec](#part3)
* [Loan Amortization Schedule](#part4)
* [Play Threes Dice Game](#part5)

<a name="readings"></a>

## Part 1 - Readings

Read __Chapter #4__ and __Chapter #5__ in your book, _{{site.book}}_ (covers Math class, chars, Strings, formatting, while loops, and for loops). Also see __Appendix F__ on Number Systems.

<a name="part2"></a>


## (10 points) Part 2 - Wish List

<pre><code data-trim contenteditable>
           ________________________
          /\                       \
          \_|     ~ Wish List ~     |
            |                       |
            |   * pizza   $15.00    |
            |   * unicorn $1000000  |
            |   ____________________|_
             \_/_____________________/

</code></pre>

### Write a program that displays the two most expensive items in a wish list

#### Overview

Using your newly found Java looping skills, write a program that asks the user for a number... and then asks the user for that many wish list items (each with a name and a cost). Print out the two most expensive items on the wishlist.

#### Setup

* Create a class (<code>.java</code>) file called <code>WishList.java</code>
* (This can be within a project that contains the other parts of this homework or it can be in separate project on its own)


#### Features

* ask the user: <code>How many items do you want in your wish list?</code>
* if they enter a number less than 2, __default the number to 2__
* ask the user ^^^^ for that many items...
    * ask for a name
    * ask for a cost
* print out the name and cost of the __two most expensive items__

#### Example Output

<pre><code data-trim contenteditable>How many items do you want in your wish list?
> 3
What's the name of item 1?
> walrus
How much does it cost?
> 45000
What's the name of item 2?
> pizza
How much does it cost?
> 15
What's the name of item 3?
> submarine
How much does it cost?
> 120000
The most expensive items were:
submarine - $120000.00
walrus - $45000.00
</code></pre>

<a name="part3"></a>

## (15 points) Part 3 - Hex Bin Dec

<pre><code data-trim contenteditable> _____ _____ __ __    _____ _____ _____    ____  _____ _____ 
 |  |  |   __|  |  |  | __  |     |   | |  |    \|   __|     |
 |     |   __|-   -|  | __ -|-   -| | | |  |  |  |   __|   --|
 |__|__|_____|__|__|  |_____|_____|_|___|  |____/|_____|_____|
</code></pre>

<!--_ -->


### Convert Binary or Hexadecimal Numbers to Decimal

#### Overview

Converting binary and hexadecimal numbers to decimal by hand is pain! Write a program that'll do this for you. It should accept either number, base-2 or base-16... and based on the prefix, 0b and 0x, it should convert to decimal appropriately.


#### Setup

* Create a class (<code>.java</code>) file called <code>BinHexDec.java</code>
* (This can be within a project that contains the other parts of this homework or it can be in separate project on its own)


#### Features

* ask the user to enter a number in either binary or hex
* the number must be prefixed with <code>0x</code> or <code>0b</code> for hex and binary respectively
* __read the input as a string__ 
* if the input does not have a valid prefix (<code>X$AAF0</code>)... or if it has a valid prefix, but no digits are present after the prefix (only <code>0x</code> or <code>0b</code>, without anything after), end the program and say <code>I don't know how to covert that number</code>
* if the input contains invalid digits for the specified base (for example <code>F</code>, or 15, for <code>0b</code>, or base-2), end the program with the message <code>Error parsing base-[either 2 or 16] number</code>
* if the input is valid, then convert the number to decimal
	* you can use <code>Integer.parseInt</code> with a single parameter (that is for the default, decimal)
	* however __you are not allowed to call the two parameter version of parseInt that allows you to use radix__ 
* for reference, converting from either a character to an int... or a String to an int 
	* <code>Character.getNumericValue(ch) // char to int</code>
	* <code>ch - 48 // or ch - '0', assuming your character is a digit</code>
	* <code>Integer.parseInt(s) // string to int, don't use radix for this assignment!</code>


#### Example Output

__(Converts from hexadecimal to decimal if prefix is 0x)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0xFFF1
Converting from base-16 to base-10
65521
</code></pre>

__(Converts from binary to decimal if prefix is 0b)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0b0101
Converting from base-2 to base-10
5
</code></pre>

__(Number does not start with 0x or 0b)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>bleargh
I don't know how to covert that number
</code></pre>

__(Number starts with appropriate prefix, but there are no characters after prefix)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0x
I don't know how to covert that number
</code></pre>

__(Number contains invalid digit for chosen base after prefix - there is no Z digit in base-16)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0xZZZZ
Error parsing base-16 number
</code></pre>

__(Number contains invalid digit for chosen base after prefix - there is no A digit in base-2)__

<pre><code data-trim contenteditable>Please enter a hex (0x) or binary (0b) number:
>0b101A
Error parsing base-2 number
</code></pre>

<a name="part4"></a>

## (10 points) Part 5 - Loan Amortization Schedule

<pre><code data-trim contenteditable>                   _._._                       _._._
                  _|   |_                     _|   |_
                  | ... |_._._._._._._._._._._| ... |
                  | ||| |  o NATIONAL BANK o  | ||| |
                  | """ |  """    """    """  | """ |
             ())  |[-|-]| [-|-]  [-|-]  [-|-] |[-|-]|  ())
            (())) |     |---------------------|     | (()))
           (())())| """ |  """    """    """  | """ |(())())
           (()))()|[-|-]|  :::   .-"-.   :::  |[-|-]|(()))()
           ()))(()|     | |~|~|  |_|_|  |~|~| |     |()))(()
              ||  |_____|_|_|_|__|_|_|__|_|_|_|_____|  ||
           ~ ~^^ @@@@@@@@@@@@@@/=======\@@@@@@@@@@@@@@ ^^~ ~
                ^~^~                                ~^~^
          Sher^
</code></pre>

### Problem 5.22 in 10th Edition of {{site.book}}: Loan Amortization Schedule

#### Overview

__Directly from the book, problem 5.22__...
(Financial application: loan amortization schedule) The monthly payment for a given loan pays the principal and the interest. The monthly interest is computed by multiplying the monthly interest rate and the balance (the remaining principal). The principal paid for the month is therefore the monthly payment minus the monthly interest. Write a program that lets the user enter the loan amount, number of years, and interest rate and displays the amortization schedule for the loan.

__Note__: The balance after the last payment may not be zero. If so, the last payment should be the normal monthly payment plus the final balance.

__Hint__: Write a loop to display the table. Since the monthly payment is the same for each month, it should be computed before the loop. The balance is initially the loan amount. For each iteration in the loop, compute the interest and principal, and update the balance. The loop may look like this:

<pre><code data-trim contenteditable>for(i = 1; i <= numberOfYears * 12; i++) {
	interest = monthlyInterestRate * balance;
	principal = monthlyPayment - interest;
	balance = balance - principal;
	System.out.println(i + "\t\t" + intrest + "\t\t" + principal + "\t\t" + balance)
}
</code></pre>

__Note from Professor__: Tailor the above code to suit your needs. This problem relies on information and examples from previous chapters in the book, so in order to solve it, you'll need to either:

1. Use Section 2.16 and __listing__ 2.9 (about software development process and computing loans) in the text as context
2. Do your own research on computing the monthly and total payment

#### Setup

* Create a class (<code>.java</code>) file called <code>Loan.java</code>
* (This can be within a project that contains the other parts of this homework or it can be in separate project on its own)


#### Example Output

__($10,000 loan, 1 year... with an interest rate of 7%)__

<pre><code data-trim contenteditable>Loan Amount: 10000
Number of Years: 1
Annual Interest Rate: 7

Monthly Payment: 865.26
Total Payment: 10383.21

Payment#     Interest     Principal    Balance
1            58.33        806.93       9193.07
2            53.62        811.64       8381.43
...
11           10.00        855.26       860.27
12            5.01        860.25         0.01
</code></pre>



<a name="part5"></a>

## (15 points) Part 5 - Play Threes

<pre><code data-trim contenteditable>                       _______
                      /o      /|
          _______    /______o/ |
         /o      /|  |o     o|o|            
        /______o/ |  |   o   | /                
        |o     o|o|  |o     o|/                
        |   o   | /  '-------'             
        |o     o|/                    
        '-------'
            
</code></pre>

### Implement a single round of playing a dice game called threes

#### Overview

Threes is a dice game where the goal is to get the lowest score (with each die face counting for that value, with the exception of threes, which count as 0). 

1. A player starts off buy rolling 5 dice. 
2. The player then chooses 1 or more dice to _pin_ (that is, to count towards their score). 
3. Once at least 1 die is pinned, the player rolls the remaining dice...
4. The player then chooses 1 or more dice to pin
5. This process repeats until the player either pins all of the remaining dice, or there's only 1 die left, and the player is forced to pin that die
6. Add the values of all of the rolls 
    * (again with threes counting as 0)
    * for example, if the pinned dice were: 1, 4, 1, 2, 3
    * ...then the score would be: 8

Here's another description of the rules for this dice game:

[http://rpasmd.org/rms/Dice_Pages/Dice_Game_Threes_Away.htm](http://rpasmd.org/rms/Dice_Pages/Dice_Game_Threes_Away.htm)

#### Setup

* Create a class (<code>.java</code>) file called <code>PlayThrees.java</code>
* (This can be within a project that contains the other parts of this homework or it can be in separate project on its own)


#### Features / Requirements

Requirements

* you'll need a way to store multiple die rolls; we don't know <code>Array</code>s yet (the _sort of_ equivalent of lists in Python)... so you'll probably make heavy use of <code>String</code>s and <code>char</code>s... as well as methods in the <code>Character</code> class.
* in particular, there's a method not mentioned in the book called:
    <pre><code data-trim contenteditable>
Character.getNumericValue(ch)    
</code></pre>
* you'll need it to convert characters to the <code>int</code> value that they represent (rather than the unicode code point)
* [check out the documentation for more details - https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#getNumericValue(char)](https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#getNumericValue(char))

Features

* roll 5 6-sided dice
* print out the results of each die roll, with each die numbered from 1 through 5
    <pre><code data-trim contenteditable>Die Roll 1 - ⚀ (1)
Die Roll 2 - ⚃ (4)
Die Roll 3 - ⚄ (5)
Die Roll 4 - ⚀ (1)
Die Roll 5 - ⚀ (1)
</code></pre>
* use the following unicode literals for the die faces, and put the actual value in parentheses:
    * <code>\u2680</code> &#x2680; (1)
    * <code>\u2681</code> &#x2681; (2)
    * <code>\u2682</code> &#x2682; (3)
    * <code>\u2683</code> &#x2683; (4)
    * <code>\u2684</code> &#x2684; (5)
    * <code>\u2685</code> &#x2685; (6)
* ask the user to enter the numbers of the rolls that they would like to _pin_ for their score
    * they have to choose at least 1 die roll
    * they can pin more than 1 by typing in each roll number they'd like to pin
    * for example, typing in 34 pins rolls 3 and 4 (which correspond to the values 4 and 1)
* display the pinned dice <code>Pinned: &#x2683; &#x2685; (34) </code>
* if there's only one die rolled, automatically pin that die for the user
    * add the roll do your collection of pinned dice
    * print out a message that says: <code>Automatically pin last die</code>
* once all of the dice are pinned, print out the player's score


#### Example Output

__(Pinning multiple dice, automatically pin roll if only 1 die)__

<pre><code data-trim contenteditable>Enter numbers of dice to pin... for example, to pin the die 1 and 2, enter 12):
Die Roll 1 - ⚀ (1)
Die Roll 2 - ⚃ (4)
Die Roll 3 - ⚄ (5)
Die Roll 4 - ⚀ (1)
Die Roll 5 - ⚀ (1)
> 145
Pinned: ⚀ ⚀ ⚀ (111)
Enter numbers of dice to pin... for example, to pin the die 1 and 2, enter 12):
Die Roll 1 - ⚀ (1)
Die Roll 2 - ⚁ (2)
> 1
Pinned: ⚀ ⚀ ⚀ ⚀ (1111)
Enter numbers of dice to pin... for example, to pin the die 1 and 2, enter 12):
Die Roll 1 - ⚃ (4)
Automatically pin last die
Pinned: ⚀ ⚀ ⚀ ⚀ ⚃ (11114)
Your score is 8!
</code></pre>


# Submission Process

* Submit assignment via NYU Classes
* Submit each <code>.java</code> file as a separate attachment
	* only submit .java files (do not submit .class files or any other files that are created in Eclipse)
	* you can find your .java files in the directory that you specified as your workspace... and within the project folder contained in the workspace directory


# Grading Criteria

* no credit: file does not compile
* -2 points: files and classes are not named according to instructions
* -2 points: inconsistent style using curly braces, inconsistent use of spaces and indentation, lack of comments
* see individual projects for points per feature
