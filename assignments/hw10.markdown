---
layout: homework
title: "Assignment #10"
---
# Assignment #10 - Due Thursday, May 5th at 11PM 

## Links...

* [Readings](#readings)
* [CampaignContributions](#part2)
* [Extra Credit](#part3)

<a name="readings"></a>

## Part 1 - Readings

From your book, _{{site.book}}_ :

* read __Chapter 12__, Exception Handling and File Input and Output 
	


<a name="part2"></a>

## (40 points) Part 2 - Campaign Contributions


### Campaign Contributions

#### Overview

Use exception handling, file input/output and commandline arguments to read in an input file, and write a new file based on data from the input file.

#### Setup

* Download [2013_Campaign_Contributions_Edited.csv](../resources/txt/2013_Campaign_Contributions_Edited.csv),
	* (right click on the link above, choose Save... As, and save __to the project directory of your homework__)
	* this is a csv file that contains the first name, last name of candidates during 2013 New York City elections... along with amounts contributed to their campaigns (each line is a contribution)
	* you can view this file using Notepad, TextEdit, Excel or OpenOffice
	* (your project folder is in your workspace, which is usually in <code>Documents/workspace</code>)
	* (you can also go to File &rarr; Switch Workspace &rarr; other ...to see your __current__ workspace)
	* it is a streamlined version of the data available at [https://data.cityofnewyork.us/City-Government/2013-Campaign-Contributions/n8p9-7jxp](https://data.cityofnewyork.us/City-Government/2013-Campaign-Contributions/n8p9-7jxp)
* Create at Least Two Class Files (<code>.java</code>) files: 
	* <code>CampaignContributions.java</code>: your entry point into your program
	* one or more additional class files to represent data read in to your program
	* (for __extra credit__, you must have a third file, <code>Contribution</code>, detailed in part 3)
* Edit your run configuration for your project so that it accepts "commandline arguments"
	* these commandline arguments will contain the names of your input and output files
	* commandline arguments are like parameters to your program... 
	* each individual argument is separated by a space when you run your program...
	* <code>java MyProgram argument1 argument2</code>
	* these values are in the <code>args</code> <code>Array</code> in your <code>main</code> method (<code>String[] args</code>)
	* to set this up in Eclipse:
		* Run
		* Run Configurations
		* Choose your class on the left hand side (should be <code>Campaign Contributions</code>)
		* Click on the arguments tab
		* Write in: <code>2013_Campaign_Contributions_Edited.csv report.txt</code>
		* this means that <code>args[0]</code> will have <code>String</code>, <code>2013_Campaign_Contributions_Edited.csv</code>
		* and <code>args[1]</code> will have have the <code>String</code>, <code>report.txt</code>
		* you will use <code>args[0]</code> and <code>arg[1]</code> in your code as file names to open for reading and writing

__Setting up commandline arguments__

<div markdown="block" class="img">
![alt](../resources/img/commandline_arguments.gif)
</div>

#### Features

__This program will__:

* read in the file passed in as the first commandline argument, <code>2013_Campaign_Contributions_Edited.csv</code> (which should be in your project folder)
* determine the total number of contributions per candidate
* calculate the average contribution per candidate
* write out the total and average contribution per candidate into another file as specified by the second commandline argument, <code>report.txt</code>
* to check you output, go to your project's folder and open report.txt
* (your project folder is in your workspace, which is usually in <code>Documents/workspace</code>)
* (you can also go to File &rarr; Switch Workspace &rarr; other ...to see your __current__ workspace)

__Instructions__:

* Create a class that represents a <code>Candidate</code>
	* there should be a way to retrieve the candidate's first name, last name, total contributions and average amount per contribution
	* you can optionally add supporting classes (or do this for extra credit, see part 3), but they are not required
		* for example, you can create a composition relationship between a <code>Candidate</code> and <code>Contributions</code>
		*... and you can add methods to run calculations on the <code>Contribution</code>s made for that particular <code>Candidate</code>

	* (for __extra credit__, you must have a third file, <code>Contribution</code>, detailed in part 3)
* Read in the file specified in <code>args[0]</code> (the <code>.csv</code> file) using a combination of a <code>File</code> object and a <code>Scanner</code> object
	* use the data form the file to create <code>Candidate</code> objects and store them in an <code>ArrayList</code>
	* extract the data from each line (hint: maybe <code>split</code> would be helpful here!) ... determine which column the first, last and contribution amount appears
	* an example row from the data looks like this: <code>2013,4,214,UN,Oddo,James,R0001349,2000</code>
	* you can see from the first line of the file, the header, what each field represents (again, you can open the original <code>.csv</code> using Notepad, TextEdit, Excel or OpenOffice)
	* this means you'll have to find some way of skipping the headers!
	* candidates will appear more than once (as they receive multiple contributions)... so you'll have to find a way to search your <code>ArrayList</code> for an existing candidate __or__ create a new one if the <code>Candidate</code> doesn't exist
* Once you've finished reading in all of the data, __sort the data by descending order of average contribution__
	* you can use one of the sorting algorithms that we know in conjunction with <code>ArrayList</code> by using the following methods on the <code>ArrayList</code> object: 
		* <code>.size()</code> - returns the number of elements in the <code>ArrayList</code> (similar to <code>myArray.length</code>)
		* <code>.get(index)</code> - returns the element at index, <code>index</code> (similar to <code>myArray[index]</code>)
		* <code>.set(index, element)</code> - sets the element at index, <code>index</code> to <code>element</code> (similar to <code>myArray[index] = element;</code>)
	* if you're interested in trying to implement <code>Comparable</code>, a lengthy way of doing this would be to:
		* have your <code>Candidate</code> class implement the <code>Comparable</code> interface
		* write your <code>compareTo</code> method 
		* create a regular <code>Array</code> based off of your <code>ArrayList</code><code>Candidate[] sorted = this.candidates.toArray(new Candidate[this.candidates.size()]);</code>
		* call <code>Arrays.sort(...)</code>, passing in your sorted <code>Array</code>
	* lastly, you can use the <code>ArrayList</code>'s <code>sort</code> method, but you'll have to do your own research on how to create a <code>Comparator</code> class and pass that into <code>sort</code> (this is probably the most idiomatic way of sorting an <code>ArrayList</code> in Java, but it's not part of the material we cover in class)
* Use a combination of a <code>File</code> object and a <code>PrintWriter</code> object to write out data to the file specified in <code>args[1]</code> (the <code>.txt</code> file):
	* each line should contain...
	* the candidate's first and last name
	* their total contributions received
	* and the average per contribution
	* for example: <code>Bill de Blasio, total: $101213.00, average: $945.92</code>
* __If a file cannot be read or written to (that is, if there's an <code>IOException</code>)__...
	* use <code>try/catch</code> to print out an appropriate error message, followed by the string version of the exception (you can find this in the <code>Exception</code> object specified in <code>catch</code>)
	* for example... in the output below, everything after the colon is the <code>String</code> representation of the <code>Exception</code> that occurred
	* <code>"Could not read from file: java.io.FileNotFoundException: does_not_exist.csv (No such file or directory)"</code>
	* <code>"Could not write to file: ..."</code>
* __If there are not enough commndline arguments (this will manifiest itself as an array index out of bounds exception)...__
	* print out the following message:
	* <code>"Input and/or output file not specified."</code>
	
#### Example Output

When you open <code>report.txt</code> it should look similar to (note, it is sorted by average contriubtion):


<pre><code data-trim contenteditable>
Anthony Weiner, total: $4930588.61, average: $1489.15
Christine Quinn, total: $3014228.97, average: $990.55
Bill de Blasio, total: $101213.00, average: $945.92
Helen Rosenthal, total: $54931.00, average: $845.09
.
. (additional candidates here...)
.
Robert Waterman, total: $22072.87, average: $53.06
</code></pre>

<a name="part3"></a>

## Part 3 - Extra Credit


### Extra Credit - Contribution Class

#### Instructions

* Add a comment in your assignment feedback in NYU Classes specifying that you've done the extra credit
* You must create a third class, <code>Contribution</code>
	* it will contain <code>amount</code>
	* and <code>refno</code>, (a <code>String</code>)
* Each candidate will have a <code>Contribution</code> <code>ArrayList</code>
* As you loop through the lines in the file:
	* Create a new <code>Contribution</code>
	* Set the amount and reference number appropriately
	* Add the <code>Contribution</code> object to the appropriate
* Add two methods to your <code>Candidate</code> class
	* <code>getTotal</code>
	* <code>getAverage</code>
	* both of these methods will use the <code>ArrayList</code> of <code>Contribution</code>s to run their calculations
