---
layout: homework
title: "Assignment #8"
---
# Assignment #8 - Due Friday, April 3rd at 11PM, No Grace Period

* [Readings](#readings)
* [Matrix](#part2)
* [One Player Pong](#part3)

<a name="readings"></a>

## Part 1 - Readings

From your book, _{{site.book}}_ :

* __Chapter #9__  on Objects and Classes
* __Chapter #10__ on Object Oriented Thinking


<a name="part2"></a>

## (25 points) Part 2 - Matrix

<pre><code data-trim contenteditable> _            _
|  9  2  3  4  |
|  6  1  8  2  |
|  5  3  4  1  |
|  4  9  0  2  |
|_ 2  8  4  2 _|
</code></pre>

### Matrix

#### Overview

Create a Matrix class and a another class to test your Matrix class functionality.

#### Setup

* Create two class (<code>.java</code>) files: <code>Matrix.java</code> and <code>MatrixTest.java</code>
* (These can be within a project that contains the other parts of this homework or it can be in separate project on its own)

#### Matrix.java

Implement the following constructors and methods. Note that your Matrix class will store an internal representation of itself as a 2 dimensional int Array (that is, you should have a member variable / data field that contains an Array of int Arrays... representing all of the elements in the Matrix).

__Reuse code where possible__ (for example, you can use your version of <code>generateRandomElements</code> for the default constructor below)

<pre><code data-trim contenteditable>
/**
 * Default constructor - initializes this matrix with 10 rows and 10
 * columns, each with a random number from 0 to 10 inclusive.
 */
public Matrix() 

/**
 * Initializes a matrix with number rows, rows and number columns, cols
 * The default value for int[]'s are left as is (0's)
 * Matrix myMatrix = new Matrix(2, 2)
 * // [ 0, 0 ]
 * // [ 0, 0 ]
 * 
 * @param rows - number of rows
 * @param cols - number of columns
 */
public Matrix(int rows, int cols) 

/**
 * Initializes a matrix with the provided 2-dimensional Array. 
 * int[][] a = {
 *   {1, 2}, 
 *   {3, 4}
 * }
 * Matrix myMatrix = new Matrix(a)
 * // [ 1, 2 ]
 * // [ 3, 4 ]
 * 
 * @param arr - two dimensional Array of ints that represents this matrix
 */	
public Matrix(int[][] arr) 

/**
 * Initializes a matrix with number rows, rows and number columns, cols
 * The default value is set to the supplied fillNumber
 * Matrix myMatrix = new Matrix(2, 3, 42)
 * // [ 42, 42, 42 ]
 * // [ 42, 42, 42 ]
 * 
 * @param rows - number of rows
 * @param cols - number of columns
 * @param fillNumber - the number to set all elements of this matrix to
 */	
public Matrix(int rows, int cols, int fillNumber) 

/**
 * Sets all of the values of this matrix to the number supplied.
 * myMatrix.fill(42)
 * // [ 42, 42 ]
 * // [ 42, 42 ]
 * 
 * @param n - the number to fill the matrix with
 */
public void fill(int n) 

/**
 * Generate random values for this matrix. Replace the current values
 * and dimensions of the matrix if they already exist... with the values
 * specified.
 * myMatrix.generateRandomElements(2, 2, -5, 5)
 * // [ -2, -5 ]
 * // [  4,  2 ]
 * 
 * @param rows - the number of rows of this matrix
 * @param cols - the number of columns of this matrix
 * @param min - the minimum possible value (inclusive) of each element
 * @param max - the maximum possible value (inclusive) of each element
 */
public void generateRandomElements(int rows, int cols, int min, int max)

/**
 * Retrieves the max integer from this matrix
 * // myMatrix = ...
 * // [ -7, -5, -8 ]
 * // [ -3, -9, -2 ]
 * myMatrix.getMaxInt() // --> -2
 * 
 * @return the largest integer in this matrix
 */
public int getMaxInt() 

/**
 * Retrieves the min integer from this matrix
 * // myMatrix = ...
 * // [ -7,  5,  8 ]
 * // [  3,  9,  2 ]
 * myMatrix.getMinInt() // --> -7
 * 
 * @return the smallest integer in this matrix
 */
public int getMinInt() 

/**
 * Gives back the number of columns in this matrix
 * // myMatrix = ...
 * // [ 7, 5, 8 ]
 * // [ 3, 9, 2 ]
 * myMatrix.getNumCols() // --> 3
 * 
 * @return the number of columns in this matrix
 */
public int getNumCols() 

/**
 * Gives back the number of rows in this matrix
 * // myMatrix = ...
 * // [ 7, 5, 8 ]
 * // [ 3, 9, 2 ]
 * myMatrix.getNumRows() // --> 2
 * 
 * @return the number of rows in this matrix
 */	
public int getNumRows() 

/**
 * Gives back the element at the row and column specified
 * // myMatrix = ...
 * // [ 7, 5, 8 ]
 * // [ 3, 9, 2 ]
 * myMatrix.getElement(0, 1) // --> 5
 * 
 * @row the row number of the element to retrieve
 * @col the col number of the element to retrieve
 * @return the number of rows in this matrix
 */		
public int getElement(int row, int col) 


/**
 * Generates a string representation of this matrix. For example:
 * [ -20,   1,  12 ]
 * [   8,  -4,   9 ] 
 * Each column is aligned to the right, and is padded with spaces
 * where necessary. Each row is enclosed in square brackets and
 * separated by new lines.
 * @return a string representation of this matrix
 */
public String toString() 

/**
 * Transforms this matrix's rows to columns and columns to rows. For
 * example:
 * [   4,   1,  -2 ]
 * [ 395,   7,   4 ]
 * 
 * transposed... is:
 * [   4,  395 ]
 * [   1,    7 ]
 * [  -2,    4 ]
 */
public void transpose() 

/**
 * Reverses all of the rows in this matrix. For example:
 * [   4,   1,  -2 ]
 * [ 395,   7,   4 ]
 * 
 * flipped horizontally is:
 * 
 * [  -2,    1,     4 ]
 * [   4,    7,   395 ]
 */	
public void horizontalFlip() 

/**
 * Reverses all of the columns in this matrix. For example:
 * [   4,   1,  -2 ]
 * [ 395,   7,   4 ]
 * 
 * flipped vertically is:
 * 
 * [ 395,   7,   4 ]
 * [   4,   1,  -2 ]
 */	
public void verticalFlip() 

/**
 * Adds the provided matrix to this matrix. For example:
 * Matrix m1 = new Matrix(2, 2, 2);
 * // [2, 2]
 * // [2, 2]
 * Matrix m2 = new Matrix(2, 2, 5);
 * // [5, 5]
 * // [5, 5]
 * boolean result = m2.add(m1);
 * System.out.println(m2.toString());
 * // [7, 7]
 * // [7, 7]
 * System.out.println(result);
 * // true
 * 
 * @m the matrix to be added
 * @return true if the matrix provided can be added to this matrix
 * ... false otherwise
 */		
public boolean add(Matrix m)

/**
 * Multiplies this matrix by the number provided. For example:
 * Matrix m = new Matrix(2, 2, 2);
 * // [2, 2]
 * // [2, 2]
 * 
 * m.multiply(2);
 * System.out.println(m.toString());
 * // [4, 4]
 * // [4, 4]
 * 
 * @param n - the number to multiply this matrix by
 */
public void multiply(int n)
</code></pre>

#### MatrixTest.java

Use the class you created above in this file. Create a main method. In your main method:

<pre><code data-trim contenteditable>

// Creat the following 2-dimensional Array of ints:
int[][] m = {
    {4, 1, -2, 129},
    {395, 7, 4, 0},
    {5, -100, 8, 55}
};

// Create a matrix called matrix1... and construct it using the Array of ints 
// from above.

// Print out matrix1.

// Make another new matrix called matrix2, but use the no arg constructor 
// (this should generate a 10x10 matrix with random elements).

// Print out matrix2.

// Now... using the same matrix, matrix2, reset it to a 5x5 matrix with 
// values ranging from -100 to 100. Use the method that generates random 
// elements.

// Print out matrix2 again.

// Now... let's work with matrix1 again...
// Get the number of rows from matrix1 and print it out.

// Get the number of columns from matrix1 and print it out.

// Get the max int from matrix1 and print it out.

// Get the min int columns from matrix1 and print it out.

// Transpose matrix1 and print it out.

// Flip matrix1 horizontally and print it out.

// Flip matrix1 vertically and print it out.

// Create a matrix called matrix3. It should have the same dimensions as 
// matrix1... and it should be filled with 1's

// Using matrix1, ... call add on it by passing in matrix3 as the matrix to add.

// Print out matrix1 again.

// Multiply matrix1 by the number 2... and print out matrix.
</code></pre>


<a name="part3"></a>

## (25 points) Part 3 - Pong!


<pre><code data-trim contenteditable>                                                                                             /
                                                                                         __   /                        
                                                                                        /  \
                                                                                        \__/                         
                                                                   





    ____________               +-----------------+
__________                     |                 |
     ___________               +-----------------+
</code></pre>
{%comment%}_ {%endcomment%}

### Pong

#### Overview

Implement a one-player Pong game.

#### Setup

* Create 3 class (<code>.java</code>) files called <code>Pong.java</code>, <code>Bar</code>, and <code>Ball.java</code>
* (This can be within a project that contains the other parts of this homework or it can be in separate project on its own)

#### Features


* create a <code>Ball</code> class
	* member variables
		* <code>x</code> - the ball's x position
		* <code>y</code> - the ball's y position
		* <code>vx</code> - the ball's horizontal velocity (added to position each time the ball moves)
		* <code>vy</code> - the ball's vertical velocity (added to position each time the ball moves)
		* <code>boardWidth</code> - the width of the window that the ball is in
		* <code>boardHeight</code> - the heigth of the window that the ball is in
		* <code>diameter</code> - the diameter of the ball
	* methods and constructors
		* a single constructor that populates all of the member variables with arguments passed in
		* a move method that has no parameters:
			* adds the velocity to the ball's x and y position
			* if the result of moving the ball places it off screen horizontally
				* flip the sign of its x velocity
				* reposition the ball so that it is still on screen 
				* remember to take the ball's diameter into account
			* if the result of moving the ball places it above the screen
				* flip the sign of its y velocity
				* reposition the ball so that it is still on screen 
				* remember to take the ball's diameter into account
			* if the result of moving the ball places it below the screen... allow it to disappear
* create a <code>Bar</code> class
	* the bar (or paddle) will continuously move until the user flips the velocity
	* member variables
		* <code>x</code> - the bar's x position
		* <code>y</code> - the bar's y position
		* <code>vx</code> - the bar's x velocity
		* <code>barWidth</code> - the width of the bar
		* <code>barHeight</code> - the height of the bar
		* <code>boardWidth</code> - the width of the window that the bar is in
	* methods
		* a move method that has no parameters:
			* adds the velocity to the bar's x position
			* checks the left and right bounds based on the boardWidth
			* if the bar goes beyond the left or right bounds: 
				* set the position to the farthest left or right it can go
				* (consequently, preventing it from moving beyond the left and right boundaries)
		* a goLeft method that has no parameters:
			* adjusts the x velocity so that the bar is moving to the left (negative)
		* a goRight method that has no parameters:
			* adjusts the x velocity so that the bar is moving to the right (negative)
* create a Pong class that uses that Ball and Bar classes to create a pong game; use the code below, and fill in the areas marked __TODO__:

<pre><code data-trim contenteditable>
import processing.core.PApplet;


public class Pong extends PApplet{
	
	final int WIDTH = 400, HEIGHT = 400;
		
	/**
	 * The background color of the window
	 */
	final int BACKGROUND_COLOR = 0;
	
	/**
	 * The diameter of the ball
	 */
	final int BALL_DIAMETER = 20;
	
	/**
	 * The paddle's x velocity
	 */
	final int PADDLE_VX = 3;
	
	/**
	 * The paddle's width
	 */
	final int PADDLE_WIDTH = 75;
	
	/**
	 * The paddle's height
	 */	
	final int PADDLE_HEIGHT = 15;

	/**
	 * The ball's max velocity
	 */	
	final int MAX_VELOCITY = 5;
	
	/**
	 * The ball's min velocity
	 */		
	final int MIN_VELOCITY = 2;	
	
	/**
	 * The ball instance representing the game's ball
	 */
	Ball ball;
	
	/**
	 * The Bar instance that represents the game's paddle
	 */
	Bar paddle;
	
    /**
     * Allow processing to be run as application rather than just applet
     */
    public static void main(String[] args) {
        PApplet.main("Pong");
    }
                    
    /**
     * Sets height and width of sketch, initalizes game.
     */
	public void setup() {
		size(WIDTH, HEIGHT);
		noStroke();
		reset();
	}
	
    /**
     * "Main" draw method... controls animation, clears screen, draws
     * elements and checks for collision.
     */
	public void draw() {
		background(BACKGROUND_COLOR);
		
		// TODO: use the ball and paddle's move methods to move them to their
		// next location
	
		// check if there's a collision... if there is, bounce the ball
		// in the opposite direction
		if (intersects(ball, paddle)) {
			ball.vy *= -1;
			ball.y = paddle.y - ball.diameter / 2 - 1;
		}
		
		// TODO: draw an ellipse and a rectangle using the ball and 
		// paddle's member variables (the ball's x, y, and diameter
		// values... and the paddle's x, y, barWidth, and barHeight
		// values)
		// ellipse(...);
		// rect(...);
	}
	
    /**
     * Reacts to left, right and (r)eset keys. Left and right change
     * the direction of the paddle.
     */
	public void keyPressed() {
		if(keyCode == LEFT) {
			// TODO: tell the paddle to move left

		} else if(keyCode == RIGHT) {
			// TODO: tell the paddle to move right

		}
		
		if(key == 'r') {
			reset();
		}
	}
	
	/**
	 * brings the ball back to the center of the screen, with a
	 * random velocity for x and y... and add the paddle to the
	 * center bottom of the window, with an initial velocity
	 * going right
	 */
	public void reset() {
		// TODO: implement a reset method to start the ball somewhere
		// in the window with a random velocity for x and y and start
		// the paddle in the center bottom of the window with an 
		// initial velocity going right
		
		// 1. do this by assigning a new Ball object to the ball variable
		//    and a new Bar object to the paddle variable
		// 2. use as many of the constants defined above as you can as
		//    arguments to the Ball and Bar constructors....
		//    a. for example, generate a random velocity based on the
		//       MIN_VELOCITY and MAX_VELOCITY constants
		//    b. initialize the paddle's velocity with PADDLE_VX, and
		//       its dimensions with PADDLE_WIDTH and PADDLE_HEIGHT
	}
	
	
	/* *
	 * tests if the ball intersects with the paddle
	 * @param b the ball
	 * @param p the paddle
	 * @return true if the ball and paddle intersect
	 */
	boolean intersects(Ball b, Bar p) {
		// TODO: determine if the ball intersects the paddle. Here's
		// a solution that works for most cases (it doesn't quite work
		// if the ball and paddle collide on the left or right most edge)
		// 1. determine the point closest to the circle that's in the paddle:
		//    a. the x coordinate is going to be the paddle's
		//       left x coordinate if the ball is to the paddle's left
		//    b. the x coordinate is going to be the paddle's
		//       right x coordinate if the ball is to the paddle's right
		//    c. the x coordinate is going to be the ball's own x coordinate
		//       if the ball is between the left and right most x value
		//       of the paddle
		// 2. once you have the closest point in the paddle... determine
		//    its distance from the ball's center
		// 3. if this distance is less than the radius, then we have an 
		//    intersection!
	}
	
	/* *
	 * generates a random integer from a, up to but not including b
	 * @param a the start number
	 * @param b goes up to, but does not include this number
	 * @return a random integer from a to b
	 */
	private int randInt(int a, int b) {
		return (int) (Math.random() * (b - a) + a);
	}
	
	/* *
	 * generates a 1 or -1
	 * @return either 1 or -1
	 */
	private int randSign() {
		// TODO: Implement a short method to generate either a 1 or a -1
	}
}

</code></pre>



#### Example Output

![pong](../resources/img/pong.gif)


