---
layout: homework
title: "Assignment #8"
---
# Assignment #8 - Due Friday, April 8th at 11PM 

* [Readings](#readings)
* [Library](#part2)
* [RPN Calculator / Stack Class](#part3)

<a name="readings"></a>

## Part 1 - Readings

From your book, _{{site.book}}_ :

* read __Chapter 10__, Object Oriented Thinking ... 
* Pay close attention to:
	* 10.1 through 10.6 (object oriented design and example classes)
	* 10.10 and 10.11 (on the String class and String Buffer / String Builder)
* See the sample code on Arrays of objects:
    * [Finding the cutest Cat object](http://www.pythontutor.com/visualize.html#code=//+In+this+example+we'll+see%3A%0A//+*+an+Array+of+objects%0A//+*+ordering+(that+is,+determining+which+object+is+greater/lesser)+objects%0A//+++based+on+a+property%0A%0Aimport+java.util.Random%3B%0A%0Apublic+class+Cat+%7B%0A%09//+A+class+that+represents+a+Cat%0A++++public+String+name%3B%0A++++public+int+cuteness%3B%0A++++%0A++++public+Cat(String+name,+int+cuteness)+%7B%0A++++++++this.name+%3D+name%3B%0A++++++++this.cuteness+%3D+cuteness%3B%0A++++%7D%0A++++%0A++++public+static+void+main(String%5B%5D+args)+%7B%0A++++++++//+Let's+try+to+find+the+cutest+cat+among+these+3+cats%3A%0A++++%09%09Cat%5B%5D+cats+%3D+new+Cat%5B3%5D%3B%0A++++++++cats%5B0%5D+%3D+new+Cat(%22Bill+Furry%22,+2)%3B%0A++++++++cats%5B1%5D+%3D+new+Cat(%22Paw+Newman%22,+7)%3B%0A++++++++cats%5B2%5D+%3D+new+Cat(%22Kitty+Purry%22,+4)%3B%0A++++++++%0A++++++++//+Assume+that+the+first+one+is+the+cutest...%0A++++++++Cat+cutestCat+%3D+cats%5B0%5D%3B%0A++++++++%0A++++++++//+Loop+through+all+of+the+others,+and+%22point%22+cutestCat%0A++++++++//+to+the+cat+that+has+the+highest+cuteness+number%0A++++++++for(int+i+%3D+1%3B+i+%3C+cats.length%3B+i%2B%2B)+%7B%0A++++++++%09%0A++++++++%09%09//+Notice+that+we're+comparing+the+cuteness+data+field%0A++++++++%09%09if(cats%5Bi%5D.cuteness+%3E+cutestCat.cuteness)+%7B%0A++++++++%09%09%09cutestCat+%3D+cats%5Bi%5D%3B%0A++++++++%09%09%7D%0A++++++++%7D%0A++++++++System.out.printf(%22The+cutest+cat+is%3A+%25s,+%25s%22,+%0A++++++++%09%09cutestCat.name,+cutestCat.cuteness)%3B%0A++++%7D%0A%7D&mode=display&origin=opt-frontend.js&cumulative=false&heapPrimitives=true&textReferences=false&py=java&rawInputLstJSON=%5B%5D&curInstr=0)
* Review sorting algorithms
	* __selection sort__ from Chapter 7
	* alternatively, you can check out [bubble sort](http://en.wikipedia.org/wiki/Bubble_sort) 
	
Lastly, check out [this sample of storing objects in an Array and swapping objects in Pythontutor's Java mode](http://www.pythontutor.com/visualize.html#code=public+class+Foo+%7B%0A++++public+static+void+main(String%5B%5D+args)+%7B%0A++++++++Foo%5B%5D+arr+%3D+new+Foo%5B3%5D%3B%0A++++++++for(int+i+%3D+0%3B+i+%3C+arr.length%3B+i%2B%2B)+%7B%0A++++++++++++arr%5Bi%5D+%3D+new+Foo(i)%3B%0A++++++++%7D%0A++++++++Foo+temp+%3D+arr%5B0%5D%3B%0A++++++++arr%5B0%5D+%3D+arr%5Barr.length+-+1%5D%3B%0A++++++++arr%5Barr.length+-+1%5D+%3D+temp%3B%0A++++%7D%0A++++%0A++++public+int+id%3B%0A++++public+Foo(int+id)+%7B%0A++++++++this.id+%3D+id%3B%0A++++%7D%0A%7D&mode=display&origin=opt-frontend.js&cumulative=false&heapPrimitives=true&textReferences=false&py=java&rawInputLstJSON=%5B%5D&curInstr=31)


<a name="part2"></a>

## (30 points) Part 2 - Library

<pre><code data-trim contenteditable>                            .-._             .----.     .--.    
                    .--.____| | |___ .---.___|''''|_____|  |___ 
                    |--|XXXX| |D|---||---|=+=|''''|-~+~-|  |---|
                    |19|    | |U|   ||\ /| ^ |    |FrnkN|**| - |
                    |84|    | |N|   || X |=^=|    |-~+~-|**| - |
                    |--|    | |E|===||/ \| ^ |''''|Stein|  | - |
                    |  |XXXX| | |---||---|=+=|''''|-~+~-|  |---|
                    `--^----'-^-^---''---^---^----^-----^--^---^
</code></pre>
{% comment %}_ {% endcomment %}

### Library

#### Overview

Create a program that allows you to manage a library (collection) of books. It should support:

* displaying all of the books in the library
* finding the first book with an author matching a last name provided
* getting a random book
* adding books
* loading _hardcoded_ books into the library (mainly for testing)
* sorting the books by author's last name or title

This should be implemented using 4 classes, one of which serves as the class that contains the <code>main</code> method.

* the classes consist of:
	* Library
	* Book
	* Person
* the classes should:
	*  model the real world entities that they're named after
	* and their design should reflect their data, actions and relationships with one another

#### Setup

* Create four class (<code>.java</code>) files: 
	* <code>MyLibrary.java</code>: a class that contains the entry point into your program, the <code>main</code> method
	* <code>Library.java</code>: a class representing a collection of books
	* <code>Book.java</code>: a class representing a book
	* <code>Person.java</code>: a class representing a person (can be used for author)
* These classes should all be in the same project (and package), so that they have access to each other

#### Features

__General Requirements__

* create the following 4 classes
	* <code>MyLibrary</code>: should contain your <code>main</code> method, and it should be responsible for all user interaction
	* <code>Library</code>: should contain variables and methods related to the management of the collection of books
	* <code>Book.java</code>: a class representing a book
	* <code>Person.java</code>: a class representing a person (author)
* try to make the majority of your data fields private, and use getter and setter methods to access them
* __you must decide what classes should containt data fields and methods__ based on the requirements and example output below
	* for example, perhaps the <code>Person</code> class should have a first name field as well as a last name field
	* maybe the <code>Book</code> class should have an author... and a method that tests if a book is by a certain author would be useful
	* note, however, that you have total freedom with the design, __but you will be graded__ on __encapsulation__ and __keeping related data and actions together__
* note that you will most likely need to maintain an <code>Array</code> of <code>Book</code> objects
	* this <code>Array</code> of <code>Book</code> objects can be added to
	* however, recall that <code>Array</code>s cannot change size
	* so... build your Array with a fixed capacity
	* __the initial capacity should be 8 books (let's keep the library small!)__
	* if a book is added and it goes beyond the capacity, do not add the book
* __do not use any nested / multi-dimensional Arrays__ in your program (instead, use objects made from the classes you build)
* it's ok to make the following __assumptions regarding your design__:
	* there's only one author per book
	* author's names are only first and last (and that the user will input the name as first name, followed by a space, followed by a last name)
	* inputs (book titles, author names, etc.) do not have new lines in them
* don't worry about doing any user input validation... for example:
	* assume that the user will always enter a valid command
	* assume that the user will enter a name as first and last separated by a space

__Program Startup and End__

* when your program starts:
* print out "Welcome to [Library Name]" (every library should have a name)
* then print out the current date and time using an object created from Java's  <code>java.util.Date</code> class
* after printing out the above info, go into a loop that continually asks the user for a command:
	* <code>(d)isplay all books<code>
	* <code>(f)ind books by author<code>
	* <code>get (r)andom book<code>
	* <code>(a)dd book</code>
	* <code>(l)oad data</code> 
	* <code>(s)ort books</code>
	* <code>(q)uit</code>
* typing (q) stops the loop, and the program should end
* the program should print out <code>Bye</code> when the user quits
* __hint:__ always use [Scanner object].nextInput to get all input up to a new line


__Display All Books__

* typing the command, <code>d</code>, will display all books in the library
* when the program begins, there are no books in the library
* books can be added by using:
	* <code>l</code> to load books that have been _hardcoded_ into the program
	* <code>a</code> to add one book at a time
* displaying the books prints out every book in the library in the following format:
	* <code>[title] by [author last name], [author first name]</code>
	* for example <code>The Hunger Games by Collins, Susan</code>

__Find Books by Author__

* typing in the command, <code>f</code>, will:
	* ask the user for an author's last name
	* retrieve the first occurrence of a book based on the author's last name entered
	* if there's more than one book by that author, then the first one found (in whatever order the books are in) will be given back
	* if there's a book found, print out its title and author using the same format as display all books: <code>[title] by [author last name], [author first name]</code>
	* if no book is found, then print out <code>Book not found</code>
* __hint__: if you'd like to have a <code>Book</code> object passed back rather than a <code>String</code> you can set an object to <code>null</code> as a default value
	* if a book is not found, then just return <code>null</code>
	* you can check if a value is <code>null</code> by <code>variableName == null</code>
* __hint__: note that since you can search by author's last name, then the implication is that an author's name must be broken up into first and last name, rather than having a single <code>String</code> represent the entire author's name

__Get Random Book__

* typing in the command, <code>r</code>, will retrieve a random book and print out its title and other in the format: <code>[title] by [author last name], [author first name]</code>
* __you must use__ a <code>Random</code> object created from the <code>java.util.Random</code> class in order to retrieve a random book

__Add a Book__

* typing in the command, <code>a</code>, will ask the user for:
	* a book title
	* an author name (the author's name should be in the format, <code>[first name] [last name]</code>
	* assume that both the book and author name are formatted appropriately - no need to validate the user's input
	* (remember to use <code>nextLine</code> on your <code>Scanner</code> object)
	* __hint__: __to break up a string, use the <code>split</code> method__ described in the 2nd to last section of the book, 10.10, on the <code>String</code> class
* it's ok to have duplicate books
* again, as stated above, your list of books will have a fixed capacity (since <code>Arrays</code> cannot change in size)
	* if a book is added and it goes beyond the capacity, do not add the book
	* display a message that says <code>"Cannot add a book"</code>
	* __the initial capacity should be 8 books (let's keep the library small!)__

__Load Data__

* to facilitate testing, typing in the command, <code>l</code>, will load hardcoded books into the library:
	
<pre><code data-trim contenteditable>Frankenstein by Shelley, Mary
Cryptonomicon by Stephenson, Neal
The Hunger Games by Collins, Susan
Neuromancer by Gibson, William
Snow Crash by Stephenson, Neal
</code></pre>

* add the books in the order above
* __if you would like to load your own books, make sure you load 5 books... and the titles and authors are not in alphabetical order__
* you can do this in any way you like (manually creating each object and adding the book... or using some sort of <code>Array</code> to seed the library with content)
* only add up to the capacity of the library (do not allow an error to occur, do not expand the library's capacity)
* it's ok to have duplicate books

__Sort Books__

* typing in the command <code>s</code> will ask the user for a sort order
	* <code>a</code> will sort the books by author
	* <code>t</code> or any other input will sort the books in your library based on title
* __hint__: use <code>compareTo</code> to determine if one title or author goes before another (see section 4.4 or 10.10 on <code>String</code> methods)
* to sort objects, use __selection sort__, which we learned from chapter 7 on Arrays
	* alternatively, you can use [bubble sort](http://en.wikipedia.org/wiki/Bubble_sort) 
	* you'll likely have to swap objects
	* for an example of swapping, [see an example on Python tutor's Java mode](http://www.pythontutor.com/visualize.html#code=public+class+Foo+%7B%0A++++public+static+void+main(String%5B%5D+args)+%7B%0A++++++++Foo%5B%5D+arr+%3D+new+Foo%5B3%5D%3B%0A++++++++for(int+i+%3D+0%3B+i+%3C+arr.length%3B+i%2B%2B)+%7B%0A++++++++++++arr%5Bi%5D+%3D+new+Foo(i)%3B%0A++++++++%7D%0A++++++++Foo+temp+%3D+arr%5B0%5D%3B%0A++++++++arr%5B0%5D+%3D+arr%5Barr.length+-+1%5D%3B%0A++++++++arr%5Barr.length+-+1%5D+%3D+temp%3B%0A++++%7D%0A++++%0A++++public+int+id%3B%0A++++public+Foo(int+id)+%7B%0A++++++++this.id+%3D+id%3B%0A++++%7D%0A%7D&mode=display&origin=opt-frontend.js&cumulative=false&heapPrimitives=true&textReferences=false&py=java&rawInputLstJSON=%5B%5D&curInstr=31)
    * ... and to see how to deal with object in an Array, [see this example in Python tutor's Java mode](http://www.pythontutor.com/visualize.html#code=//+In+this+example+we'll+see%3A%0A//+*+an+Array+of+objects%0A//+*+ordering+(that+is,+determining+which+object+is+greater/lesser)+objects%0A//+++based+on+a+property%0A%0Aimport+java.util.Random%3B%0A%0Apublic+class+Cat+%7B%0A%09//+A+class+that+represents+a+Cat%0A++++public+String+name%3B%0A++++public+int+cuteness%3B%0A++++%0A++++public+Cat(String+name,+int+cuteness)+%7B%0A++++++++this.name+%3D+name%3B%0A++++++++this.cuteness+%3D+cuteness%3B%0A++++%7D%0A++++%0A++++public+static+void+main(String%5B%5D+args)+%7B%0A++++++++//+Let's+try+to+find+the+cutest+cat+among+these+3+cats%3A%0A++++%09%09Cat%5B%5D+cats+%3D+new+Cat%5B3%5D%3B%0A++++++++cats%5B0%5D+%3D+new+Cat(%22Bill+Furry%22,+2)%3B%0A++++++++cats%5B1%5D+%3D+new+Cat(%22Paw+Newman%22,+7)%3B%0A++++++++cats%5B2%5D+%3D+new+Cat(%22Kitty+Purry%22,+4)%3B%0A++++++++%0A++++++++//+Assume+that+the+first+one+is+the+cutest...%0A++++++++Cat+cutestCat+%3D+cats%5B0%5D%3B%0A++++++++%0A++++++++//+Loop+through+all+of+the+others,+and+%22point%22+cutestCat%0A++++++++//+to+the+cat+that+has+the+highest+cuteness+number%0A++++++++for(int+i+%3D+1%3B+i+%3C+cats.length%3B+i%2B%2B)+%7B%0A++++++++%09%0A++++++++%09%09//+Notice+that+we're+comparing+the+cuteness+data+field%0A++++++++%09%09if(cats%5Bi%5D.cuteness+%3E+cutestCat.cuteness)+%7B%0A++++++++%09%09%09cutestCat+%3D+cats%5Bi%5D%3B%0A++++++++%09%09%7D%0A++++++++%7D%0A++++++++System.out.printf(%22The+cutest+cat+is%3A+%25s,+%25s%22,+%0A++++++++%09%09cutestCat.name,+cutestCat.cuteness)%3B%0A++++%7D%0A%7D&mode=display&origin=opt-frontend.js&cumulative=false&heapPrimitives=true&textReferences=false&py=java&rawInputLstJSON=%5B%5D&curInstr=0)

#### Example Output

<br>

__Initial start of program shows library's name, and the current date and time.__ 

<pre><code data-trim contenteditable>Welcome to: Joe's Library o' Science Fiction
Today is Sun Apr 05 18:08:41 EDT 2015
</code></pre>

<br>

__Load hardcoded book data, and display all of the books in the library (title and author name).__ &rarr;

<pre><code data-trim contenteditable>(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> l
5 books loaded
(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> d
Frankenstein by Shelley, Mary
Cryptonomicon by Stephenson, Neal
The Hunger Games by Collins, Susan
Neuromancer by Gibson, William
Snow Crash by Stephenson, Neal
</code></pre>
<br>

__Find the first book in the library by author's last name; 1st example shows a book found (and shows that book's title and author)... while the second example shows that no books were found with the provided last name.__  &rarr;

<pre><code data-trim contenteditable>(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> f
Enter an author's last name
> Stephenson
Found Cryptonomicon by Stephenson, Neal
(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> f
Enter an author's last name
> Clarke
Book not found.
</code></pre>

<br>

__Get a random book.__ &rarr;
<pre><code data-trim contenteditable>(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> r
Frankenstein by Shelley, Mary
</code></pre>

<br>

__Add a book. Provide both a title and author. After displaying again, new book should be at end of books in library.__  &rarr;

<pre><code data-trim contenteditable>(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> a
Please enter the book's title:
> Dune
Please enter the book's author (firstName lastName):
> Frank Herbert
Added:
Dune by Herbert, Frank
(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> d
Frankenstein by Shelley, Mary
Cryptonomicon by Stephenson, Neal
The Hunger Games by Collins, Susan
Neuromancer by Gibson, William
Snow Crash by Stephenson, Neal
Dune by Herbert, Frank
</code></pre>

<br>

__Attempting to add a book when the library's capcity (should be 8) is reached... results in a message: "_Cannot add book_"__ &rarr;

<pre><code data-trim contenteditable>
(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> d
Frankenstein by Shelley, Mary
Cryptonomicon by Stephenson, Neal
The Hunger Games by Collins, Susan
Neuromancer by Gibson, William
Snow Crash by Stephenson, Neal
Dune by Herbert, Frank
Dispossessed by LeGuin, Ursula
Ender's Game by Card, Orson
(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> a
Please enter the book's title:
> 1984
Please enter the book's author (firstName lastName):
> George Orwell
Cannot add book
</code></pre>

<br>

__Sort books by author's last name, then display newly sorted list of books.__  &rarr;

<pre><code data-trim contenteditable>(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> s
Sort by (a)uthor or by (t)itle (default is title):
> a
Sorted by author
(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> d
The Hunger Games by Collins, Susan
Neuromancer by Gibson, William
Dune by Herbert, Frank
Frankenstein by Shelley, Mary
Snow Crash by Stephenson, Neal
Cryptonomicon by Stephenson, Neal
</code></pre>

<br>

__Sort books again, but this time by title (the default sort order if author isn't explicitly set as sort by)... display the books afterwards.__ &rarr;
<pre><code data-trim contenteditable>(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> s
Sort by (a)uthor or by (t)itle (default is title):
> t
Sorted by title
(d)isplay all books, (f)ind books by author, get (r)andom book, (a)dd book, (l)oad data, (s)ort books or (q)uit
> d
Cryptonomicon by Stephenson, Neal
Dune by Herbert, Frank
Frankenstein by Shelley, Mary
Neuromancer by Gibson, William
Snow Crash by Stephenson, Neal
The Hunger Games by Collins, Susan
</code></pre>

<a name="part3"></a>

## (20 points) Part 3 - RPN Calculator


<pre><code data-trim contenteditable>   ____________________
 /____________________/|
|  _________________  ||
| |       2 8 + 5 * | ||
| |_________________| ||
|  __ __ __ __ __ __  ||
| |__|__|__|__|__|__| ||
|  ___ ___ ___   ___  ||
| |_7_|_8_|_9_| |_+_| ||
| |_4_|_5_|_6_| |_-_| ||
| |_1_|_2_|_3_| |_x_| ||
| |_._|_0_|_=_| |_/_| ||
|_____________________|/
</code></pre>
{%comment%}_ {%endcomment%}

### RPN Calculator

#### Overview

Create a program that evaluates a [reverse polish notation (postfix) mathematical expression](http://en.wikipedia.org/wiki/Reverse_Polish_notation).

#### Setup

* Create 2 class (<code>.java</code>) files: 
	* <code>StackOfDoubles.java</code>: a class representing a stack
	* <code>RPNCalculator.java</code>: your entry point to your program; it should contain <code>main</code>
* These should be in the same project

#### Features

* create a class that represents a [data structure called a stack](http://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29)
	* a stack allows you to store elements by _pushing_ items on to the stack of elements
	* ... and retrieve and remove items by _popping_ them off of the top of the stack
	* __See section 10.6 for a sample implementation of a stack of ints__
	* create your own stack class, but instead of ints, store doubles
	* it should have mostly the same methods as what's in the book... (there's one additional method, <code>toString</code>)
	* your <code>StackOfDoubles</code> class should support:
		* <code>toString()</code> &rarr; returns a <code>String</code> representation of the stack
		* <code>empty()</code> &rarr; returns a <code>boolean</code> that describes whether or not the stack is empty
		* <code>peek()</code> &rarr; returns a <code>double</code>... allows you to view the double at the top of the stack without removing it
		* <code>push(double num)</code> &rarr; does not return a value... however, adds a <code>double</code> to the top of the stack
		* <code>pop()</code> &rarr; removes the top element (that is, the most recently added) element from the top of the stack... and returns it as a <code>double</code>
* <code>toString()</code> should return a <code>String</code> representation of your stack (that is, it should _return_ a <code>String</code>)
	* however, do not just concatenate Strings using <code>+</code>
	* instead, __use <code>StringBuilder</code> or <code>StringBuffer</code> (both in section 10.11) to construct your String in your <code>toString()</code> method__
* __do not use <code>Arrays.toString()</code>__
* the toString representation should be:
	* <code>[element1] [element2] [element3]</code>
	* <code>3.0 2.0 74.0</code>
* your <code>RPNCalculator</code> class should have a <code>main</code> method
* this method should collect a mathematical expression in Reverse Polish Notation (RPN) from the user
	* __the entire expression is entered as single input__
	* it will consist of integers and operators, <code>+, -, *, /, ^</code> {% comment %}* {% endcomment %}
	* ...each part of the expression will be separated by a space
	* __hint__: use <code>nextLine</code> to get the entirety of the expression
	* __hint__: it should break up the expression into individual parts by using the <code>String</code>'s <code>split</code> method
* once you've extracted the individual parts from the input, evaluate the RPN expression
* Reverse Polish Notation (or postfix) works in the following way:
	* the operator of an operation appears immediately after its operands
	* for example <code>3 4 +</code> is the same as <code>3 + 4</code>
	* when reading RPN, once you see an operator, immediately evaluate it using the preceding values as operators
	* as a result, this notation doesn't require parentheses
	* for example: <code>3 4 + 5 *</code> could be translated to <code>(3 + 4) * 5</code> {% comment %}* {% endcomment %}
	* another example: <code>2 3 64 8 / + 7 - ^</code> could be translated to <code>2 ^ ((3 + 64 / 8) - 7)</code>
	* [you can read more about RPN on wikipedia](http://en.wikipedia.org/wiki/Reverse_Polish_notation)
* the algorithm for evaluating an RPN expression is as follows:

<pre><code data-trim contenteditable>for token in expression
  if token is numeric
    push token on stack
  else if token is an operator
    pop the number of operands that operator takes off of the stack
	apply the operation on the operands
	push the new value on to the stack
if there's only one value left in the stack
  use that as the result of the calculation
</code></pre>

* here is a sample run using the expression <code>23 7 + 2 *</code>:

<pre><code data-trim contenteditable>token: '23', 23 is pushed on to the stack, stack = 23.0 
token: '7', 7 is pushed on to the stack, stack = 23.0 7.0 
token: '+', + pops 23 and 7, adds them and pushes 30.0 on to the stack, stack = 30.0 
token: '2', 2 is pushed on to the stack = 30.0 2.0 
token: '*', * pops 30 and 2 off of the stack, multiplies them and pushes 60 on to the stack, stack = 60.0 
result of calculation is 60
</code></pre>

* __you can make the following assumptions__
	* all operators (addition, multiplication, subtraction, division, and exponentiation) have two operands (so two elements will be popped off of the stack when you encounter an operator
	* assume that only integers are in the expression (this actually doesn't really matter that much since you _should_ be using <code>split</code> to break up the input stream)
* __as you calculate the expression, output the contents of the stack for each token processed__ ... see example output below:

#### Example Output

<pre><code data-trim contenteditable>Please enter a postfix expression:
> 23 7 + 2 *
Processing token: '23', stack = 23.0 
Processing token: '7', stack = 23.0 7.0 
Processing token: '+', stack = 30.0 
Processing token: '2', stack = 30.0 2.0 
Processing token: '*', stack = 60.0 
</code></pre>

<pre><code data-trim contenteditable>Please enter a postfix expression:
> 2 3 64 8 / + 7 - ^
Processing token: '2', stack = 2.0 
Processing token: '3', stack = 2.0 3.0 
Processing token: '64', stack = 2.0 3.0 64.0 
Processing token: '8', stack = 2.0 3.0 64.0 8.0 
Processing token: '/', stack = 2.0 3.0 8.0 
Processing token: '+', stack = 2.0 11.0 
Processing token: '7', stack = 2.0 11.0 7.0 
Processing token: '-', stack = 2.0 4.0 
Processing token: '^', stack = 16.0 
</code></pre>

<pre><code data-trim contenteditable>Please enter a postfix expression:
> 2 40 3 * 5 3 - 2 ^ / +
Processing token: '2', stack = 2.0 
Processing token: '40', stack = 2.0 40.0 
Processing token: '3', stack = 2.0 40.0 3.0 
Processing token: '*', stack = 2.0 120.0 
Processing token: '5', stack = 2.0 120.0 5.0 
Processing token: '3', stack = 2.0 120.0 5.0 3.0 
Processing token: '-', stack = 2.0 120.0 2.0 
Processing token: '2', stack = 2.0 120.0 2.0 2.0 
Processing token: '^', stack = 2.0 120.0 4.0 
Processing token: '/', stack = 2.0 30.0 
Processing token: '+', stack = 32.0 
</code></pre>


